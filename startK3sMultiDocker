#!/bin/bash

cd "$( dirname "${BASH_SOURCE[0]}" )"

INSTANCE_NAME=${INSTANCE_NAME:-k3smulti}
YAML=${QEMU_YAML:-./docker-k3s-multiarch.yaml}

# start lima from desired yaml file
# check for disks and create them first with limactl disk create blah --size blah
DISK_NAME=docker
DISK_PRESENT=$(limactl disk ls 2>/dev/null| grep $DISK_NAME)
if [ -z "$DISK_PRESENT" ]; then
    limactl disk create $DISK_NAME --size 40G
fi
EXISTS="$(limactl list -f '{{ .Name }}' $INSTANCE_NAME)"
if [ -z "$EXISTS" ]; then
    echo "prune cache and start $INSTANCE_NAME using $YAML"
    limactl prune
    limactl start --name $INSTANCE_NAME --tty=false $YAML
else
    INSTANCE_NAME=$INSTANCE_NAME ./restartInstance
fi


echo "Performing above steps ..."
# set up docker
docker context create lima-$INSTANCE_NAME --docker "host=unix://$HOME/.lima/$INSTANCE_NAME/sock/docker.sock"
docker context use lima-$INSTANCE_NAME
# copy kubeconfig
mkdir -p ~/.lima/$INSTANCE_NAME/copied-from-guest
HERE="$(pwd)"
cd
limactl shell $INSTANCE_NAME sudo cat /etc/rancher/k3s/k3s.yaml > ~/.lima/$INSTANCE_NAME/copied-from-guest/kubeconfig.yaml

# merge kube config with current one
MY_CONFIG=~/.kube/config
GUEST_CONFIG=/tmp/k3s$$
NEW_CONFIG=/tmp/new$$
limactl shell $INSTANCE_NAME sudo kubectl config view --flatten > $GUEST_CONFIG
sed -i "s/default/$INSTANCE_NAME/g" $GUEST_CONFIG
KUBECONFIG=$MY_CONFIG kubectl config set-context default
KUBECONFIG=$MY_CONFIG kubectl config use-context default
KUBECONFIG=$MY_CONFIG kubectl config delete-user $INSTANCE_NAME
KUBECONFIG=$MY_CONFIG kubectl config delete-context $INSTANCE_NAME
KUBECONFIG=$MY_CONFIG kubectl config delete-cluster $INSTANCE_NAME
KUBECONFIG=$MY_CONFIG:$GUEST_CONFIG kubectl config view --merge --flatten > $NEW_CONFIG
TS=$(stat --format "%y" $MY_CONFIG | sed 's/\..*//;s/ /_/g;s/://g')
mv $MY_CONFIG ${MY_CONFIG}_${TS}
mv $NEW_CONFIG $MY_CONFIG
rm -f $GUEST_CONFIG $NEW_CONFIG
cd "$HERE"
INSTANCE_NAME=$INSTANCE_NAME ./startRegistry
echo "see \"$HOME/.lima/$INSTANCE_NAME/serial.log\" for startup details"
